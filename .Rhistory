catElements
catExemplars
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
dim(catExemplars[[1]])
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
what
catExemplars
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
eSampled
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
eSampled
catExemplars
sum(catExemplars[[2]][, 1])
sum(catExemplars[[2]][, 2])
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
eSampled
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
rSampled
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
sSampled
rSampled
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
counts = table(rSampled$cat1, rSampled$cat2)
counts = table(rSampled)
counts
dim(counts)
barplot(as.matrix(eSampled))
barplot(as.matrix(rSampled))
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
elemStr
exemStr
barplot(as.matrix(exemStr))
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
barplot(as.matrix(exemStr[[1]]))
barplot(as.matrix(exemStr[[2]]))
barplot(as.matrix(exemStr[[1]]))
barplot(as.matrix(elemStr[[1]]))
barplot(as.matrix(elemStr[[2]]))
barplot(as.matrix(elemStr[1]))
barplot(as.matrix(elemStr[2]))
elemStr
barplot(elemStr)
plot(elemStr)
plot(elemStr[1, ])
line(elemStr[2, ])
lines(elemStr[2, ])
plot(elemStr[1, ], lty = 'l')
plot(elemStr[1, ], linety = 'l')
plot(elemStr[1, ], ty = 'l')
lines(elemStr[2, ])
plot(elemStr[1, ], ty = 'l', col = 'red')
lines(elemStr[2, ], col = 'blue')
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
source('~/Google Drive/Wasserman\'s Lab/R/updateElemStr.R')
a
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
plot(tapply(sim_data$correct_p, sim_data$session, mean))
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
z
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
elemStr
exemStr
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
a
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
a
source('~/Google Drive/Wasserman\'s Lab/R/updateElemStr.R')
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
source('~/Google Drive/Wasserman\'s Lab/R/updateElemStr.R')
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
exemStr
elemStr
dim(elemStr)
exemStr
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
h_relative
max(h_relative)
round(max_relative)
round(max(h_relative))
round(max(h_relative), 3)
round(max(h_relative), 2)
round(max(h_relative), 1)
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
average_data = read.table('bhatt.csv', sep =',')
names(average_data)
head(average_data)
average_data = read.table('bhatt.csv', sep =',', header = TRUE)
names(average_data)
head(average_data)
testingPhase = 1
nSessions = 60
nTestSessions = 2
if (testingPhase){
axLimit = nSessions+nTestSessions
}else{
axLimit = nSessions
}
average_data_train = subset(average_data, average_data[, 'phase'] == 1
plot(tapply(average_data_train$correct_p, average_data_train$session, mean), type = 'o', col = '#333333',
ylim = c(0.25, 1.05), xlim = c(0, axLimit), xaxt = 'n', yaxt = 'n', pch = 16, ylab = '', xlab = 'Session', bty = 'n')
lines(tapply(average_data_train$outcome, average_data_train$session, mean), type = 'o', col = '#999999', pch = 16)
axis(1, at = c(10*0:axLimit))
axis(2, at = seq(0.25, 1, 0.10), labels = seq(0.25, 1, 0.10), las=1)
title(main='Acquisition curves', font.main = 2)
legend(nSessions/3, 0.4, c("P of correct response (training)", "Proportion correct (training)", "P of correct response (testing)", "Proportion correct (testing)"), cex=0.7,
col=c("#333333", "#999999", "#333333", "#999999"), pch=c(16, 16, 17, 17))
#plot the testing data
if (testingPhase){
average_data_test = subset(average_data, average_data[, 'phase'] == 2)
lines(61:62, tapply(average_data_test$correct_p, average_data_test$session, mean), type = 'o', pch = 17, col = '#333333')
lines(61:62, tapply(average_data_test$outcome, average_data_test$session, mean), type = 'o', pch = 17, col = '#666666')
}
testingPhase = 1
nSessions = 60
nTestSessions = 2
if (testingPhase){
axLimit = nSessions+nTestSessions
}else{
axLimit = nSessions
}
average_data_train = subset(average_data, average_data[, 'phase'] == 1)
plot(tapply(average_data_train$correct_p, average_data_train$session, mean), type = 'o', col = '#333333',
ylim = c(0.25, 1.05), xlim = c(0, axLimit), xaxt = 'n', yaxt = 'n', pch = 16, ylab = '', xlab = 'Session', bty = 'n')
lines(tapply(average_data_train$outcome, average_data_train$session, mean), type = 'o', col = '#999999', pch = 16)
axis(1, at = c(10*0:axLimit))
axis(2, at = seq(0.25, 1, 0.10), labels = seq(0.25, 1, 0.10), las=1)
title(main='Acquisition curves', font.main = 2)
legend(nSessions/3, 0.4, c("P of correct response (training)", "Proportion correct (training)", "P of correct response (testing)", "Proportion correct (testing)"), cex=0.7,
col=c("#333333", "#999999", "#333333", "#999999"), pch=c(16, 16, 17, 17))
#plot the testing data
if (testingPhase){
average_data_test = subset(average_data, average_data[, 'phase'] == 2)
lines(61:62, tapply(average_data_test$correct_p, average_data_test$session, mean), type = 'o', pch = 17, col = '#333333')
lines(61:62, tapply(average_data_test$outcome, average_data_test$session, mean), type = 'o', pch = 17, col = '#666666')
}
par(mfcol = c(1, 1))
testingPhase = 1
nSessions = 60
nTestSessions = 2
if (testingPhase){
axLimit = nSessions+nTestSessions
}else{
axLimit = nSessions
}
average_data_train = subset(average_data, average_data[, 'phase'] == 1)
plot(tapply(average_data_train$correct_p, average_data_train$session, mean), type = 'o', col = '#333333',
ylim = c(0.25, 1.05), xlim = c(0, axLimit), xaxt = 'n', yaxt = 'n', pch = 16, ylab = '', xlab = 'Session', bty = 'n')
lines(tapply(average_data_train$outcome, average_data_train$session, mean), type = 'o', col = '#999999', pch = 16)
axis(1, at = c(10*0:axLimit))
axis(2, at = seq(0.25, 1, 0.10), labels = seq(0.25, 1, 0.10), las=1)
title(main='Acquisition curves', font.main = 2)
legend(nSessions/3, 0.4, c("P of correct response (training)", "Proportion correct (training)", "P of correct response (testing)", "Proportion correct (testing)"), cex=0.7,
col=c("#333333", "#999999", "#333333", "#999999"), pch=c(16, 16, 17, 17))
#plot the testing data
if (testingPhase){
average_data_test = subset(average_data, average_data[, 'phase'] == 2)
lines(61:62, tapply(average_data_test$correct_p, average_data_test$session, mean), type = 'o', pch = 17, col = '#333333')
lines(61:62, tapply(average_data_test$outcome, average_data_test$session, mean), type = 'o', pch = 17, col = '#666666')
}
par(mfcol = c(1, 1))
testingPhase = 1
nSessions = 60
nTestSessions = 2
if (testingPhase){
axLimit = nSessions+nTestSessions
}else{
axLimit = nSessions
}
average_data_train = subset(average_data, average_data[, 'phase'] == 1)
plot(tapply(average_data_train$correct_p, average_data_train$session, mean), type = 'o', col = '#333333',
ylim = c(0.25, 1.05), xlim = c(0, axLimit), xaxt = 'n', yaxt = 'n', pch = 16, ylab = '', xlab = 'Session', bty = 'n')
lines(tapply(average_data_train$outcome, average_data_train$session, mean), type = 'o', col = '#999999', pch = 16)
axis(1, at = c(10*0:axLimit))
axis(2, at = seq(0.25, 1, 0.10), labels = seq(0.25, 1, 0.10), las=1)
title(main='Acquisition curves', font.main = 2)
legend(nSessions/3, 0.4, c("P of correct response (training)", "Proportion correct (training)", "P of correct response (testing)", "Proportion correct (testing)"), cex=0.7,
col=c("#333333", "#999999", "#333333", "#999999"), pch=c(16, 16, 17, 17))
#plot the testing data
if (testingPhase){
average_data_test = subset(average_data, average_data[, 'phase'] == 2)
lines(61:62, tapply(average_data_test$correct_p, average_data_test$session, mean), type = 'o', pch = 17, col = '#333333')
lines(61:62, tapply(average_data_test$outcome, average_data_test$session, mean), type = 'o', pch = 17, col = '#666666')
}
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
elemStr
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
source('~/Google Drive/Wasserman\'s Lab/R/getGeneralizationStr.R')
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
source('~/Google Drive/Wasserman\'s Lab/R/getGeneralizationStr.R')
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
testingExemplars
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
testingExemplars
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
dim(sim_data)
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
source('~/Google Drive/Wasserman\'s Lab/R/getGeneralizationStr.R')
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
nSessions
nSessions+1
nSessions+nTestSessions
source('~/Google Drive/Wasserman\'s Lab/R/main.R')
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
average_data
rm(average_data)
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
head(average_data)
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
train_1
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
head(train_1)
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
a
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
testing_data
head(testing_data)
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
counts
testing_data$phase
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
counts
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
counts
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
head(train_1)
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
a
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
means
head(means)
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
head(means)
head
testing_data
means
source('~/Google Drive/Wasserman\'s Lab/R/Simulations/Category size/plot.R')
source('~/Google Drive/Wasserman\'s Lab/R/simultaneous.R')
trialsMatrix
source('~/Google Drive/Wasserman\'s Lab/R/simultaneous.R')
source('~/Google Drive/Wasserman\'s Lab/R/createSimultaneousTraining.R')
source('~/Google Drive/Wasserman\'s Lab/R/simultaneous.R')
source('~/Google Drive/Wasserman\'s Lab/R/createSimultaneousTraining.R')
source('~/Google Drive/Wasserman\'s Lab/R/simultaneous.R')
source('~/Google Drive/Wasserman\'s Lab/R/createSimultaneousTraining.R')
breateSimultaneousTraining
createSimultaneousTraining
createSimultaneousTraining()
source('~/Google Drive/Wasserman\'s Lab/R/simultaneous.R')
source('createSimultaneousTraining.R')
source('~/Google Drive/Wasserman\'s Lab/R/simultaneous.R')
dcast
install('reshape2')
install.packages("reshape2")
dcast
help(dcast)
cast
library(reshape2)
dcast
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='victor-navarro',
token='10CEE4E4F3A15B9AD9C2A17B4A487563',
secret='CUJCT6K8VqB0Wd9kyXXNHPwO27sAmhnfBzicramw')
library(shinyapps)
getwd()
shinyapps::deplyApp("/Users/edwardwasserman/Google Drive/Wasserman's Lab/R/ShinyApps/bucketapp")
shinyapps::deployApp("/Users/edwardwasserman/Google Drive/Wasserman's Lab/R/ShinyApps/bucketapp")
shiny::runApp('ShinyApps/bucketapp')
help(plotOutput)
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
help(actionButton)
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
??renderText
shiny::runApp('ShinyApps/bucketapp')
??helpText
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
??observeEvent
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
shiny::runApp('ShinyApps/bucketapp')
help(wellPanel)
??column
shiny::runApp('ShinyApps/bucketapp')
library(ggplot2)
source('theme_shiny.R')
farthest = read.table("data/farthest.txt", header = T)
farthest$group = 'Farthest'
closest = read.table("data/closest.txt", header = T)
closest$group = 'Closest'
thedata = subset(rbind(farthest, closest), optimal_r != 9)
getwd()
setwd("/Users/edwardwasserman/Google Drive/Wasserman's Lab/R/ShinyApps/bucketapp")
library(ggplot2)
source('theme_shiny.R')
farthest = read.table("data/farthest.txt", header = T)
farthest$group = 'Farthest'
closest = read.table("data/closest.txt", header = T)
closest$group = 'Closest'
thedata = subset(rbind(farthest, closest), optimal_r != 9)
holder = thedata
ggplot(holder, aes(x=distance, y = left)) + stat_summary(geom = 'line', fun.y = 'mean') +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = .1, alpha = .4) + theme_shiny() +
stat_summary(fun.y = 'mean', geom = 'point', size = 1) + geom_vline(xintercept = 0, linetype = 'dotted', alpha = .4) +
geom_hline(yintercept = 0.5, linetype = 'dotted', alpha = .4) +
labs(x = 'Distance (left bucket - right bucket)', y = 'Proportion of left choices') +
coord_cartesian(ylim = c(-0.02, 1.02)) +
scale_y_continuous(breaks = seq(0.0, 1, .1), labels = seq(0.0, 1, .1)) +
scale_x_continuous(breaks = c(-9:9))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('theme_shiny.R')
shiny::runApp()
